name: Monitoring and Observability

on:
    # Disabled - functionality moved to ci-cd.yml
    workflow_dispatch:
        inputs:
            monitoring_type:
                description: "Type of monitoring to perform"
                required: true
                default: "full"
                type: choice
                options:
                    - full
                    - health-check
                    - performance
                    - security

jobs:
    monitoring-setup:
        runs-on: ubuntu-latest
        if: github.event.inputs.monitoring_type == 'full' || github.event.inputs.monitoring_type == 'health-check' || github.event_name == 'push'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup monitoring tools
              run: |
                  # Install monitoring tools
                  sudo apt-get update
                  sudo apt-get install -y curl jq

            - name: Create Kind cluster for monitoring
              run: |
                  # Install Kind
                  curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
                  chmod +x ./kind
                  sudo mv ./kind /usr/local/bin/kind

                  # Create Kind cluster
                  kind create cluster --name monitoring-cluster

            - name: Install Prometheus and Grafana
              run: |
                  # Install Helm
                  curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

                  # Add Prometheus Helm repository
                  helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
                  helm repo add grafana https://grafana.github.io/helm-charts
                  helm repo update

                  # Install Prometheus
                  helm install prometheus prometheus-community/kube-prometheus-stack \
                    --namespace monitoring \
                    --create-namespace \
                    --set grafana.adminPassword=admin123

            - name: Build Docker image
              run: |
                  # Build the Docker image for the application
                  docker build -t interview-app:latest ./app
                  echo "Docker image built successfully"

            - name: Load image into Kind cluster
              run: |
                  # Load the Docker image into the Kind cluster
                  kind load docker-image interview-app:latest --name monitoring-cluster
                  echo "Docker image loaded into Kind cluster"

            - name: Deploy application with monitoring
              run: |
                  # Deploy the application with monitoring enabled
                  helm install interview-app ./helm/interview-app \
                    --set monitoring.enabled=true \
                    --set monitoring.prometheusOperator=true \
                    --set service.type=ClusterIP

            - name: Wait for application to be ready
              run: |
                  echo "Checking deployment status..."
                  kubectl get deployments
                  kubectl get pods

                  echo "Waiting for deployment to be available..."
                  kubectl wait --for=condition=available --timeout=300s deployment/interview-app || {
                      echo "Deployment failed, checking status:"
                      kubectl describe deployment interview-app
                      kubectl get events --sort-by=.metadata.creationTimestamp
                      exit 1
                  }

                  echo "Deployment is ready!"
                  sleep 30

            - name: Run health checks
              run: |
                  echo "## Health Check Results" >> $GITHUB_STEP_SUMMARY

                  # Get application pod
                  POD_NAME=$(kubectl get pods -l app.kubernetes.io/name=interview-app -o jsonpath='{.items[0].metadata.name}')

                  # Check pod status
                  echo "**Pod Status:**" >> $GITHUB_STEP_SUMMARY
                  kubectl get pod $POD_NAME -o wide >> $GITHUB_STEP_SUMMARY

                  # Check application health
                  kubectl port-forward service/interview-app 8080:80 &
                  PF_PID=$!
                  sleep 5

                  echo "**Health Endpoint Response:**" >> $GITHUB_STEP_SUMMARY
                  curl -f http://localhost:8080/health >> $GITHUB_STEP_SUMMARY || echo "Health check failed"

                  echo "**Main Endpoint Response:**" >> $GITHUB_STEP_SUMMARY
                  curl -f http://localhost:8080/ >> $GITHUB_STEP_SUMMARY || echo "Main endpoint failed"

                  # Clean up port-forward
                  kill $PF_PID 2>/dev/null || true

            - name: Check Prometheus metrics
              run: |
                  echo "**Prometheus Metrics:**" >> $GITHUB_STEP_SUMMARY

                  # Port forward to Prometheus
                  kubectl port-forward service/prometheus-kube-prometheus-prometheus 9090:9090 &
                  PF_PID=$!
                  sleep 10

                  # Check if metrics are being collected
                  curl -s "http://localhost:9090/api/v1/targets" | jq '.data.activeTargets[] | select(.labels.job=="interview-app")' >> $GITHUB_STEP_SUMMARY || echo "No metrics found"

                  # Clean up port-forward
                  kill $PF_PID 2>/dev/null || true

      - name: Generate monitoring report
        if: always()
        env:
          MONITORING_TYPE: ${{ github.event.inputs.monitoring_type || 'full' }}
        run: |
          echo "## Monitoring Report" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Monitoring Type:** $MONITORING_TYPE" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### Components Deployed:" >> $GITHUB_STEP_SUMMARY
                  echo "- ✅ Prometheus (metrics collection)" >> $GITHUB_STEP_SUMMARY
                  echo "- ✅ Grafana (visualization)" >> $GITHUB_STEP_SUMMARY
                  echo "- ✅ Application with monitoring enabled" >> $GITHUB_STEP_SUMMARY
                  echo "- ✅ ServiceMonitor for metrics scraping" >> $GITHUB_STEP_SUMMARY
                  echo "- ✅ PrometheusRule for alerting" >> $GITHUB_STEP_SUMMARY

    performance-test:
        runs-on: ubuntu-latest
        if: github.event.inputs.monitoring_type == 'full' || github.event.inputs.monitoring_type == 'performance' || github.event_name == 'push'
        needs: monitoring-setup

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup performance testing tools
              run: |
                  # Install performance testing tools
                  sudo apt-get update
                  sudo apt-get install -y curl apache2-utils

            - name: Run load tests
              run: |
                  echo "## Performance Test Results" >> $GITHUB_STEP_SUMMARY

                  # Simple load test with ab (Apache Bench)
                  echo "**Load Test (100 requests, 10 concurrent):**" >> $GITHUB_STEP_SUMMARY
                  ab -n 100 -c 10 http://localhost:8080/ >> $GITHUB_STEP_SUMMARY || echo "Load test failed"

                  echo "**Health Check Load Test:**" >> $GITHUB_STEP_SUMMARY
                  ab -n 50 -c 5 http://localhost:8080/health >> $GITHUB_STEP_SUMMARY || echo "Health check load test failed"

    cleanup:
        runs-on: ubuntu-latest
        if: always()
        needs: [monitoring-setup, performance-test]

        steps:
            - name: Cleanup Kind cluster
              run: |
                  kind delete cluster --name monitoring-cluster || true
