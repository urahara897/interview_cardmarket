name: GitOps Setup

on:
  workflow_dispatch:
    inputs:
      cluster_type:
        description: "Type of cluster to setup ArgoCD on"
        required: true
        default: "kind"
        type: choice
        options:
          - kind
          - minikube
          - existing

jobs:
  setup-gitops:
    runs-on: ubuntu-latest
    if: github.event.inputs.cluster_type == 'kind'

    steps:
      - name: Get source code
        uses: actions/checkout@v4

      - name: Set up Kubernetes tools
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Create persistent Kind cluster
        run: |
          # Install Kind
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

          # Create persistent Kind cluster for GitOps
          kind create cluster --name gitops-cluster --config - <<EOF
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
  kubeadmConfigPatches:
  - |
    kind: InitConfiguration
    nodeRegistration:
      kubeletExtraArgs:
        node-labels: "ingress-ready=true"
  extraPortMappings:
  - containerPort: 80
    hostPort: 80
    protocol: TCP
  - containerPort: 443
    hostPort: 443
    protocol: TCP
  - containerPort: 30080
    hostPort: 30080
    protocol: TCP
EOF

            - name: Build and load application image
              run: |
                  # Build our app image
                  docker build -t interview-app:latest ./app
                  # Load it into the Kind cluster
                  kind load docker-image interview-app:latest --name gitops-cluster

            - name: Install ArgoCD
              run: |
                  # Create ArgoCD namespace
                  kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -

                  # Install ArgoCD
                  kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

                  # Wait for ArgoCD to be ready
                  echo "Waiting for ArgoCD to be ready..."
                  kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd

      - name: Install application
        run: |
          # Install the interview-app application
          kubectl apply -f argocd/application.yaml

          # Wait for application to sync (with timeout handling)
          echo "Waiting for application to sync and become healthy..."
          if kubectl wait --for=condition=healthy --timeout=300s application/interview-app -n argocd; then
              echo "Application is healthy!"
          else
              echo "Application failed to become healthy within timeout. Debugging..."
              
              echo "=== ArgoCD Applications ==="
              kubectl get applications -n argocd
              
              echo "=== Application Details ==="
              kubectl describe application interview-app -n argocd
              
              echo "=== ArgoCD Pods ==="
              kubectl get pods -n argocd
              
              echo "=== Application Pods ==="
              kubectl get pods -l app.kubernetes.io/name=interview-app
              
              echo "=== Recent Events ==="
              kubectl get events --sort-by='.lastTimestamp'
              
              echo "=== ArgoCD Controller Logs ==="
              kubectl logs -n argocd deployment/argocd-application-controller --tail=50
              
              echo "=== Application Pod Logs (if any) ==="
              kubectl logs -l app.kubernetes.io/name=interview-app --tail=20 || echo "No application pods found"
              
              # Don't fail the workflow, just show the status
              echo "Workflow continuing despite application health check failure..."
          fi

      - name: Show ArgoCD status
        run: |
          echo "=== ArgoCD Applications ==="
          kubectl get applications -n argocd

          echo "=== ArgoCD Admin Password ==="
          kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
          echo ""

          echo "=== Access ArgoCD UI ==="
          echo "kubectl port-forward svc/argocd-server -n argocd 8080:443"
          echo "Then visit: https://localhost:8080"
