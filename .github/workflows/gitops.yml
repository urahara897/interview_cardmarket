name: GitOps Deployment

on:
  push:
    branches: [main]
    paths:
      - "helm/**"
  workflow_dispatch:

env:
  IMAGE_NAME: interview-app

jobs:
  gitops-sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Create Kind cluster for GitOps
        run: |
          # Install Kind
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

          # Create Kind cluster
          kind create cluster --name gitops-cluster --config - <<EOF
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            extraPortMappings:
            - containerPort: 80
              hostPort: 80
              protocol: TCP
            - containerPort: 30080
              hostPort: 30080
              protocol: TCP
          EOF

      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

          echo "Waiting for ArgoCD to be ready..."
          kubectl wait --for=condition=available deployment/argocd-server -n argocd --timeout=300s

          echo "Checking ArgoCD status..."
          kubectl get pods -n argocd
          kubectl get services -n argocd

      - name: Install ArgoCD CLI
        run: |
          # Install ArgoCD CLI
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Configure ArgoCD
        run: |
          # Get ArgoCD admin password
          kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d > argocd-password.txt
          echo "ArgoCD admin password: $(cat argocd-password.txt)"

          # Port forward ArgoCD server
          kubectl port-forward -n argocd svc/argocd-server 8080:443 &
          sleep 10

          # Login to ArgoCD
          argocd login localhost:8080 --username admin --password $(cat argocd-password.txt) --insecure

      - name: Create Application
        run: |
          # Create ArgoCD application pointing to Helm chart
          kubectl apply -f - <<EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: interview-app
            namespace: argocd
          spec:
            project: default
            source:
              repoURL: https://github.com/${{ github.repository }}
              targetRevision: HEAD
              path: helm/interview-app
              helm:
                valueFiles:
                - values.yaml
            destination:
              server: https://kubernetes.default.svc
              namespace: default
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
              - CreateNamespace=true
          EOF

      - name: Sync application manually
        run: |
          echo "Manually syncing ArgoCD application..."
          argocd app sync interview-app --timeout 60 || echo "Manual sync failed, continuing..."

      - name: Wait for sync
        run: |
          echo "Checking ArgoCD application status..."
          kubectl get application interview-app -n argocd -o yaml

          echo "Waiting for application to be synced..."
          kubectl wait --for=condition=Synced application/interview-app -n argocd --timeout=300s || {
              echo "Application sync timed out, checking status:"
              kubectl describe application interview-app -n argocd
              exit 1
          }

          echo "Application synced successfully!"

      - name: Verify deployment
        run: |
          kubectl get applications -n argocd
          kubectl get pods
          kubectl get services

      - name: Generate GitOps report
        run: |
          echo "## GitOps Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "**GitOps Tool:** ArgoCD" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Application Status:" >> $GITHUB_STEP_SUMMARY
          kubectl get application interview-app -n argocd -o yaml >> $GITHUB_STEP_SUMMARY
