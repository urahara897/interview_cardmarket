---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myNginx
spec:
  selector:
    matchLabels:
      app: myNginx
  replicas: 2
  template:
    metadata:
      labels:
        app: myNgnx
    spec:
      containers:
      - name: myNginx
        image: nginx
        ports:
        - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: myNginx
  labels:
    app: myNginx
spec:
  ports:
  - port: 8080


** I was asked to review the shell script in `shell/script.sh`. Here's my feedback: 

Label Mismatch 

In the Deployment template, the label "app: myNgnx" does not match the label "app: myNginx" in the Service template.
The selector would not match the pod labels so the deployment would not work.




Service has no selector

The Service template does not have a selector, which means it would not be able to find the pods to route traffic to.
apiVersion: v1
kind: Service
metadata:
  name: myNginx
  labels:
    app: myNginx
spec:
  ports:
  - port: 8080
  selector:
    app: myNginx




Port Mismatch

Container port is 8000 but the Service port is 8080.
Container listens to port 8000 and service tries to send traffic to port 8080. 
The traffic would go to the wrong port thus failing.

# In the Deployment (Container)
containers:
  - name: myNginx
    image: nginx
    ports:
      - containerPort: 80    # Container listens on port 80

---
spec:
  ports:
    - port: 8080             # External port (what users connect to)
      targetPort: 80         # Internal port (where container listens)




Missing Resource Limits, Health Checks and targetPort in Service

No CPU/memory limit can lead to memory exhaustion.

No liveness and readiness probes can lead to the pod being stuck in a ready state.

Service does not have a targetPort, which means the traffic may go to the wrong port(if the container should not listen to the port external users connect to).

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myNginx
  labels:
    app: myNginx
    version: v1.0.0
spec:
  replicas: 2
  selector:
    matchLabels:
      app: myNginx
  template:
    metadata:
      labels:
        app: myNginx
        version: v1.0.0
    spec:
      containers:
        - name: myNginx
          image: nginx:1.25
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: myNginx
  labels:
    app: myNginx
    version: v1.0.0
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: 80
      protocol: TCP
  selector:
    app: myNginx

**